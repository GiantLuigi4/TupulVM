// vscode does not like this file at all
#include "generated.h"
TupulByte* tupSum(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) + *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) + *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) + *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) + *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {double l = *((double*) num0) + *((double*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == FLOAT) {float l = *((float*) num0) + *((float*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}return {0};}
TupulByte* tupDiff(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) - *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) - *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) - *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) - *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {double l = *((double*) num0) - *((double*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == FLOAT) {float l = *((float*) num0) - *((float*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}return {0};}
TupulByte* tupProd(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) * *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) * *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) * *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) * *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {double l = *((double*) num0) * *((double*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == FLOAT) {float l = *((float*) num0) * *((float*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}return {0};}
TupulByte* tupQuot(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) / *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) / *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) / *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) / *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {double l = *((double*) num0) / *((double*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == FLOAT) {float l = *((float*) num0) / *((float*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}return {0};}
TupulByte* tupRemain(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) % *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) % *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) % *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) % *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {return {0};}if (type[0] == FLOAT) {return {0};}return {0};}
TupulByte* tupXor(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) ^ *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) ^ *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) ^ *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) ^ *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {return {0};}if (type[0] == FLOAT) {return {0};}return {0};}
TupulByte* tupBAnd(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) & *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) & *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) & *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) & *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {return {0};}if (type[0] == FLOAT) {return {0};}return {0};}
TupulByte* tupBOr(TupulByte* num0, TupulByte* type0, TupulByte* num1, TupulByte* type1, TupulByte** type) {type[0] = preferredType(type0, type1);if (type0 != type[0]) num0 = tupCast(num0, type0, type[0]);if (type1 != type[0]) num1 = tupCast(num1, type1, type[0]);if (type[0] == BYTE) {TupulByte l = *((TupulByte*) num0) | *((TupulByte*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 1);out[0] = bytes[0];return out;}if (type[0] == SHORT) {short l = *((short*) num0) | *((short*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 2);out[0] = bytes[0];out[1] = bytes[1];return out;}if (type[0] == INT) {int l = *((int*) num0) | *((int*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 4);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];return out;}if (type[0] == LONG) {long long l = *((long long*) num0) | *((long long*) num1);TupulByte* bytes = (TupulByte*) &l;TupulByte* out = (TupulByte*) trackedAlloc(sizeof(TupulByte), 8);out[0] = bytes[0];out[1] = bytes[1];out[2] = bytes[2];out[3] = bytes[3];out[4] = bytes[4];out[5] = bytes[5];out[6] = bytes[6];out[7] = bytes[7];return out;}if (type[0] == DOUBLE) {return {0};}if (type[0] == FLOAT) {return {0};}return {0};}
